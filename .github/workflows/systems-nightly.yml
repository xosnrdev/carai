name: Systems Nightly

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  paths-filter:
    name: Paths Filter
    runs-on: ubuntu-latest
    outputs:
      editor: ${{ steps.changes.outputs.editor }}
      rce: ${{ steps.changes.outputs.rce }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes in paths
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            editor:
              - 'editor/**'
            rce:
              - 'rce/**'

  editor:
    name: Editor
    runs-on: ubuntu-latest
    needs: paths-filter
    if: needs.paths-filter.outputs.editor == 'true'
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_DSN: ${{ secrets.EDITOR_SENTRY_DSN }}
    container: node:20.12
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./editor
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Pass formatting
        run: pnpm fmt:write

      - name: Build
        run: pnpm build

  rce:
    name: RCE
    runs-on: ubuntu-latest
    needs: paths-filter
    if: needs.paths-filter.outputs.rce == 'true'
    container: node:20.12
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_DSN: ${{ secrets.RCE_SENTRY_DSN }}
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./rce
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup packages && nosocket
        run: >
          apt-get update &&
          apt-get install -y coreutils binutils build-essential libseccomp-dev gcc apt-utils &&
          make -C ./nosocket/ all && make -C ./nosocket/ install

      - name: Install other language packages
        run: |
          apt-get install -y python3 sqlite3 lua5.4

      - name: Setup directory
        run: mkdir -p /code/$(whoami)

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Test & coverage
        run: npm run test
        env:
          LANGUAGE_JAVASCRIPT: true
          LANGUAGE_C: true
          LANGUAGE_LUA: true
          LANGUAGE_PYTHON: true
          LANGUAGE_SQLITE: true

      - name: Codecov
        uses: codecov/codecov-action@v4
        with:
          flags: rce
          token: ${{secrets.CODECOV_TOKEN}}

  build-editor:
    name: Build Editor
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_DSN: ${{ secrets.EDITOR_SENTRY_DSN }}
    timeout-minutes: 30
    needs:
      - editor
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-editor
          flavor: |
            latest=false
          tags: |
            type=edge
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:editor"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-rce:
    name: Build RCE
    runs-on: ubuntu-latest
    timeout-minutes: 720
    env:
      SENTRY_DSN: ${{ secrets.RCE_SENTRY_DSN  }}
      SENTRY_AUTH_TOKEN: ${{  secrets.SENTRY_AUTH_TOKEN }}
    needs:
      - rce
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-rce
          flavor: |
            latest=false
          tags: |
            type=edge
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: "{{defaultContext}}:rce"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
