name: ci

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master
  schedule:
    - cron: "00 01 * * *"
  workflow_dispatch:

permissions:
  contents: read

env:
  SQLX_VERSION: 0.8.2
  SQLX_FEATURES: "rustls,postgres"
  RUST_BACKTRACE: 1

jobs:
  test:
    defaults:
      run:
        working-directory: server
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.TEST_DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: anonymous

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Wait for PostgreSQL to be ready
        env:
          POSTGRES_USER: ${{ secrets.TEST_DB_USERNAME }}
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -U $POSTGRES_USER && break
            echo "PostgreSQL is unavailable - sleeping"
            sleep 5
          done

      - name: Install sqlx-cli
        run: |
          cargo install sqlx-cli --version ${{ env.SQLX_VERSION }} --features ${{ env.SQLX_FEATURES }} --no-default-features --locked

      - name: Migrate, Prepare and Test
        env:
          DATABASE_URL: postgres://${{ secrets.TEST_DB_USERNAME }}:${{ secrets.TEST_DB_PASSWORD }}@localhost:5432/anonymous
          TEST_DB_USERNAME: ${{ secrets.TEST_DB_USERNAME }}
          TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
        run: |
          cargo sqlx migrate run
          cargo sqlx prepare
          cargo test

  rustfmt:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all --check

  clippy:
    defaults:
      run:
        working-directory: server
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy
      - name: Run clippy
        run: cargo clippy -- -D warnings

  docs:
    defaults:
      run:
        working-directory: server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --document-private-items
